/* 실전문제 짝수번호 PP.145-160 */
2.
SELECT EMP.EMPNO, ENAME, DEPT.DNAME
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO
ORDER BY DNAME, ENAME DESC;

4.
SELECT EMPNO, ENAME, DEPT.DNAME
FROM EMP JOIN DEPT USING(DEPTNO);

6.
SELECT ENAME, LOC
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO
AND LOC = 'NEW YORK';

8.
SELECT ENAME, LOC
FROM EMP JOIN DEPT USING(DEPTNO)
WHERE LOC = 'NEW YORK';

10.
SELECT EMPNO, ENAME, LOC
FROM EMP JOIN DEPT USING(DEPTNO)
WHERE LOC = 'NEW YORK'
ORDER BY 1;

12.
SELECT ENAME, DNAME, LOC
FROM EMP JOIN DEPT USING(DEPTNO)
WHERE ENAME = 'ADAMS';

14.
SELECT ENAME, DNAME, LOC
FROM EMP NATURAL JOIN DEPT
WHERE ENAME = 'ADAMS';

16.
SELECT EMPNO, ENAME, DNAME, SAL
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO
AND SAL BETWEEN 1000 AND 2000
ORDER BY 1;

18.
SELECT EMPNO, ENAME, LOC
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO
AND LOC IN ('NEW YORK', 'DALLAS')
ORDER BY 1;

20.
SELECT EMPNO, ENAME, LOC
FROM EMP NATURAL JOIN DEPT
WHERE LOC IN ('NEW YORK', 'DALLAS')
ORDER BY 1;

22.
SELECT EMPNO, ENAME, SAL, GRADE
FROM EMP, SALGRADE
WHERE SAL BETWEEN LOSAL AND HISAL
ORDER BY 4,1;

24.
SELECT A.EMPNO, A.ENAME, B.EMPNO, B.ENAME
FROM EMP A JOIN EMP B ON A.MGR = B.EMPNO;

26.
SELECT B.ENAME, B.SAL
FROM EMP A, EMP B
WHERE B.SAL > A.SAL
AND A.ENAME = 'BLAKE';

28.
SELECT EMPNO
FROM EMP
WHERE SAL = (SELECT SAL
            FROM EMP
            WHERE ENAME = 'FORD');
            
30.
SELECT B.EMPNO, B.ENAME, COUNT(*)
FROM EMP A JOIN EMP B ON A.MGR = B.EMPNO
GROUP BY B.EMPNO, B.ENAME, A.MGR
ORDER BY 3 DESC;

32.
SELECT *
FROM EMP
WHERE SAL > (SELECT SAL
            FROM EMP
            WHERE ENAME = 'SCOTT');
            
34.
SELECT *
FROM EMP
WHERE DEPTNO <> 20
AND JOB IN (SELECT JOB
            FROM EMP
            WHERE DEPTNO = 20);
            
36.
SELECT *
FROM EMP
WHERE SAL > ALL(SELECT AVG(SAL)
                FROM EMP
                GROUP BY DEPTNO);
                
38.
SELECT *
FROM EMP
WHERE DEPTNO = (SELECT DEPTNO
                FROM DEPT
                WHERE LOC = 'CHICAGO');
                
/* 연습문제 짝수만 PP.161-163 */
2.
SELECT ENROL.STU_NO, STU_NAME, SUB_NAME, ENR_GRADE
FROM STUDENT, SUBJECT, ENROL
WHERE STUDENT.STU_NO = ENROL.STU_NO
AND SUBJECT.SUB_NO = ENROL.SUB_NO;

4.
SELECT SUB_NAME, STU_NO, ENR_GRADE
FROM ENROL JOIN SUBJECT USING(SUB_NO);

6.
SELECT UNIQUE STU_NAME
FROM STUDENT JOIN ENROL USING(STU_NO)
WHERE ENR_GRADE>=60;

8.
SELECT SUB_NAME, SUB_PROF
FROM SUBJECT, ENROL, STUDENT
WHERE SUBJECT.SUB_NO = ENROL.SUB_NO
AND ENROL.STU_NO = STUDENT.STU_NO
AND STUDENT.STU_NAME = '김인중';

10.
SELECT SUB_NAME, SUB_PROF
FROM SUBJECT JOIN ENROL USING(SUB_NO)
WHERE STU_NO = (SELECT STU_NO 
                FROM STUDENT 
                JOIN ENROL USING (STU_NO) 
                WHERE STU_NAME = '김인중');
                
12.
SELECT STUDENT.STU_NO, STU_NAME
FROM STUDENT, ENROL, SUBJECT
WHERE STUDENT.STU_NO = ENROL.STU_NO
AND ENROL.SUB_NO = SUBJECT.SUB_NO
AND SUBJECT.SUB_NAME = '컴퓨터개론';

14.
SELECT UNIQUE STUDENT.STU_NO, STU_NAME
FROM STUDENT, ENROL, SUBJECT
WHERE STUDENT.STU_NO = ENROL.STU_NO
AND ENROL.SUB_NO = SUBJECT.SUB_NO
AND (SUBJECT.SUB_GRADE = 1 OR SUBJECT.SUB_DEPT = '컴퓨터정보');

16.
SELECT STU_NO
FROM ENROL JOIN SUBJECT USING(SUB_NO)
WHERE SUB_PROF IN ('김태영', '김유석');

18.
SELECT STU_NAME, SUB_NAME
FROM STUDENT, ENROL, SUBJECT
WHERE STUDENT.STU_NO = ENROL.STU_NO
AND ENROL.SUB_NO = SUBJECT.SUB_NO
AND STU_NAME = '옥한빛';

20.
SELECT STUDENT.STU_WEIGHT, SUB_NAME
FROM STUDENT, ENROL, SUBJECT
WHERE STUDENT.STU_NO = ENROL.STU_NO
AND ENROL.SUB_NO = SUBJECT.SUB_NO
AND STUDENT.STU_WEIGHT >=60;

22.
SELECT COUNT(UNIQUE STU_NO)
FROM ENROL
WHERE ENR_GRADE>=70;

24.
SELECT STUDENT.STU_NO, STU_NAME, ENR_GRADE
FROM STUDENT, ENROL
WHERE STUDENT.STU_NO = ENROL.STU_NO
AND ENR_GRADE >(SELECT AVG(ENR_GRADE)
                FROM STUDENT, ENROL 
                WHERE STUDENT.STU_NO = ENROL.STU_NO 
                AND STU_NAME = '김종헌')
AND STUDENT.STU_NAME <> '김종헌';

26.
SELECT STUDENT.STU_NO, STU_NAME, SUB_NAME, ENR_GRADE
FROM STUDENT, ENROL, SUBJECT
WHERE STUDENT.STU_NO = ENROL.STU_NO
AND ENROL.SUB_NO = SUBJECT.SUB_NO
AND ENR_GRADE> (SELECT AVG(ENR_GRADE) 
                FROM ENROL);
                
28.
SELECT STU_DEPT, MAX(ENR_GRADE)
FROM STUDENT, ENROL
WHERE STUDENT.STU_NO = ENROL.STU_NO
GROUP BY STU_DEPT
HAVING MAX(ENR_GRADE)>(SELECT MAX(ENR_GRADE) 
                        FROM STUDENT, ENROL 
                        WHERE STUDENT.STU_NO = ENROL.STU_NO
                        AND STU_DEPT = '기계');
                        
30.
SELECT A.STU_NO, STU_NAME, ENR_GRADE
FROM STUDENT A, ENROL B, SUBJECT C
WHERE A.STU_NO = B.STU_NO
AND B.SUB_NO = C.SUB_NO
AND SUB_NAME = '시스템분석설계'
ORDER BY 3 DESC;

32.
SELECT A.STU_DEPT, A.STU_NO, A.STU_NAME
FROM STUDENT A, ENROL B
WHERE A.STU_NO = B.STU_NO
GROUP BY STU_DEPT, A.STU_NO, STU_NAME
HAVING COUNT(B.SUB_NO) = 1
ORDER BY 1,2;

34.
SELECT A.STU_NO, A.STU_NAME, C.SUB_NAME
FROM STUDENT A, ENROL B, SUBJECT C
WHERE A.STU_NO = B.STU_NO
AND B.SUB_NO = C.SUB_NO
AND C.SUB_NAME IN ('컴퓨터개론','시스템분석설계')
ORDER BY 1;